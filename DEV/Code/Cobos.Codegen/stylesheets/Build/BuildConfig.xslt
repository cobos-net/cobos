<xsl:stylesheet version="1.0"
						xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
						xmlns:msxsl="urn:schemas-microsoft-com:xslt"
						exclude-result-prefixes="msxsl"
						xmlns="http://schemas.cobos.co.uk/buildconfig/1.0.0"
						xmlns:c="http://schemas.cobos.co.uk/buildconfig/1.0.0"
						xmlns:xsd="http://www.w3.org/2001/XMLSchema"
>
	<xsl:output method="text" indent="yes" omit-xml-declaration="yes"/>
	<xsl:strip-space elements="*"/>

	<!-- 
	=============================================================================
	Filename: BuildConfig.xslt
	Description: XSLT for generation of a build batch file from build config.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Created by: N.Davis                        Date: 2010-04-09
	Modified by:                               Date:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Notes: The generated batch file calls all of the other batch files used
	for code generation.
	
	============================================================================
	-->

	<xsl:param name="targetdir"/>

	<xsl:template match="/c:BuildConfiguration">
@echo off
setlocal
REM ===========================================================================
REM Filename: ~build.bat
REM Description: coordinates the codegen utiltities to generate artefacts
REM ---------------------------------------------------------------------------
REM This batch file was generated by a tool.
REM
REM Changes to this file may cause incorrect behavior and will be lost if
REM the code is regenerated.
REM
REM This batch file was auto-generated by Cobos SDK tools.
REM ===========================================================================

cd "<xsl:value-of select="$targetdir"/>"

REM --------------------------------------------------------------------------
REM Build tools and processing stylesheets
REM --------------------------------------------------------------------------

set codegen="<xsl:value-of select="c:Folders/c:Codegen"/>"
set build_folder="<xsl:value-of select="c:Folders/c:Build"/>"

REM --------------------------------------------------------------------------
REM Processing variables
REM --------------------------------------------------------------------------

set code_language=<xsl:value-of select="c:Definitions/c:Language"/>
set code_namespace=<xsl:value-of select="c:Definitions/c:Namespaces/c:Code"/>
set xml_namespace=<xsl:value-of select="c:Definitions/c:Namespaces/c:Xml"/>
set error_message=

echo ===========================================================================
echo Cleanup and copy stylesheet files from Cobos code generator.
echo ===========================================================================

if not exist %build_folder% goto :no_build_folder
rmdir /S /Q %build_folder%

:no_build_folder

mkdir %build_folder%
xcopy %codegen%\stylesheets\*.* %build_folder% /C /E /I /R /Y /Q

		<xsl:apply-templates select="c:Folders/c:CustomStylesheets"/>

		<xsl:apply-templates select="c:Database"/>

		<xsl:apply-templates select="c:DataModels/c:DataModel"/>

goto BUILD_EVENTS_OK

:BUILD_EVENT_FAILED
echo %error_message%
endlocal
exit 1

:BUILD_EVENTS_OK
endlocal
	</xsl:template>

	<!--
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Custom stylesheets for processing
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

	<xsl:template match="c:CustomStylesheets">
set custom_stylesheets="<xsl:value-of select="."/>"
xcopy %custom_stylesheets%\*.* %build_folder% /C /E /I /R /Y /Q
	</xsl:template>

	<!--
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Database processing
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

	<xsl:template match="c:Database">
echo ==========================================================================
echo Pre-process database schemas.
echo ==========================================================================

call %codegen%\database.bat %build_folder% <xsl:value-of select="c:Platform"/> "<xsl:value-of select="c:ConnectionString"/>" <xsl:value-of select="c:Schema"/> <xsl:apply-templates select="c:Tables/c:Table"/>
	</xsl:template>

	<xsl:template match="c:Table">
		<xsl:text> </xsl:text>
		<xsl:value-of select="."/>
	</xsl:template>

	<!--
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Data model processing
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

	<xsl:template match="c:DataModel">
echo ==========================================================================
echo  Process the <xsl:value-of select="c:Id"/> data model.
echo ==========================================================================

set <xsl:value-of select="c:Id"/>_model=<xsl:value-of select="c:Folder"/>\<xsl:value-of select="c:ModelFilename"/>
set <xsl:value-of select="c:Id"/>_out=<xsl:value-of select="c:Folder"/>\Generated

		<xsl:if test="not( @generateSchema ) or @generateSchema = 'true'">
call %codegen%\schema.bat %<xsl:value-of select="c:Id"/>_model% %<xsl:value-of select="c:Id"/>_out% %build_folder% %xml_namespace% <xsl:apply-templates select="c:SchemaOptions/*"/>
		</xsl:if>
		
		<xsl:if test="not( @generateCode ) or @generateCode = 'true'">
call %codegen%\classes.bat %<xsl:value-of select="c:Id"/>_model% %<xsl:value-of select="c:Id"/>_out% %build_folder% %code_language% %code_namespace%.<xsl:value-of select="c:Id"/> %xml_namespace%
		</xsl:if>
	</xsl:template>

	<xsl:variable name="quot">"</xsl:variable>

	<xsl:template match="c:RootNodeName">
		<xsl:value-of select="concat( ' ', $quot, 'rootNodeName=', ., $quot )"/>
	</xsl:template>

	<xsl:template match="c:MultiplicityMode">
		<xsl:value-of select="concat( ' ', $quot, 'multiplicityMode=', ., $quot )"/>
	</xsl:template>

	<!--
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Check for processing errors
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	
	<xsl:template name="errorCheck">
		<xsl:param name="errorMessage"/>
if %errorlevel% neq 0 (
	set error_message="<xsl:value-of select="$errorMessage"/>"
	goto BUILD_EVENT_FAILED
)
	</xsl:template>

</xsl:stylesheet>