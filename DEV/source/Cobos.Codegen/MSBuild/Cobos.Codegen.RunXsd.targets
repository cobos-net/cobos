<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="RunXsd" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- 
	=============================================================================
	Filename: Cobos.Codegen.Xsd.targets
	Description: Run XSD.exe.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Created by: N.Davis                        Date: 2010-02-09
	Modified by:                               Date:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Usage: 
			<MSBuild Projects="Cobos.Codegen.RunXsd.targets"
						Targets="RunXsd"
						Properties="XsdInput=<XsdInput>;
										XsdTarget=<XsdTarget>;
										XsdNamespace=<XsdNamespace>;
										XsdOutputFolder=<XsdOutputFolder>" />
	Description:
			XsdInput:			The input schema document.
			XsdTarget:			Either dataset or classes
			XsdNamespace:		The code namespace for the generated classes.
			XsdOutputFolder:	The output folder for the generated code.
			
	Example:
			<MSBuild Projects="Cobos.Codegen.RunXsd.targets"
						Targets="RunXsd"
						Properties="XsdInput=MySchema.xsd;
										XsdTarget=dataset;
										XsdNamespace=Cobos.Example.Data;
										XsdOutputFolder=$(GeneratedDir)" />
	============================================================================
	-->

	<!-- 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Support for x86 applications.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

	<PropertyGroup>
		<!--MSBuild 4.0 property-->
		<ProgramFiles32>$(MSBuildProgramFiles32)</ProgramFiles32>
		<!--Use OS env var as a fallback:- 32 bit MSBuild 2.0/3.5 on x64 will use this-->
		<ProgramFiles32 Condition=" '' == '$(ProgramFiles32)'">$(ProgramFiles%28x86%29)</ProgramFiles32>

		<!-- Handle MSBuild 2.0/3.5 running in 64 bit mode - neither of the above env vars are available. http://stackoverflow.com/questions/336633
       NB this trick (Adding a literal " (x86)" to the 64 bit Program Files path) may or may not work on all versions of Windows -->
		<ProgramFiles32 Condition ="'$(ProgramFiles32)'=='' AND 'AMD64' == '$(PROCESSOR_ARCHITECTURE)'">$(ProgramFiles) (x86)</ProgramFiles32>

		<!--Catch-all - handles .NET 2.0/3.5 non-AMD64 and .NET 2.0 on x86 -->
		<ProgramFiles32 Condition=" '' == '$(ProgramFiles32)' ">$(ProgramFiles)</ProgramFiles32>
	</PropertyGroup>

	<!-- 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Find the path to xsd.exe.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

	<PropertyGroup>
		<!-- All possible XSD.exe versions -->
		<Xsd_60A>$(ProgramFiles32)\Microsoft SDKs\Windows\v6.0A\Bin\xsd.exe</Xsd_60A>
		<Xsd_60A_x64>$(ProgramFiles32)\Microsoft SDKs\Windows\v6.0A\Bin\x64\xsd.exe</Xsd_60A_x64>
		<Xsd_70A>$(ProgramFiles32)\Microsoft SDKs\Windows\v7.0A\Bin\xsd.exe</Xsd_70A>
		<Xsd_70A_x64>$(ProgramFiles32)\Microsoft SDKs\Windows\v7.0A\Bin\x64\xsd.exe</Xsd_70A_x64>

		<!-- Detect which version is installed -->
		<XsdExe Condition="Exists( '$(Xsd_60A)' )">$(Xsd_60A)</XsdExe>
		<XsdExe Condition="Exists( '$(Xsd_60A_x64)' )">$(Xsd_60A_x64)</XsdExe>
		<XsdExe Condition="Exists( '$(Xsd_70A)' )">$(Xsd_70A)</XsdExe>
		<XsdExe Condition="Exists( '$(Xsd_70A_x64)' )">$(Xsd_70A_x64)</XsdExe>
	</PropertyGroup>

	<!--
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Run XSD.exe
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	
	<Target Name="RunXsd">
		
		<!-- Error checking -->
		<Error Condition=" '$(XsdInput)'=='' " Text="RunXsd: You must supply an input file." />
		<Error Condition=" '$(XsdTarget)'=='' " Text="RunXsd: You must supply a target: dataset or classes." />
		<Error Condition=" '$(XsdNamespace)'=='' " Text="RunXsd: You must supply a namespace identifier." />
		<Error Condition=" '$(XsdOutputFolder)'=='' " Text="RunXsd: You must supply an output folder." />
		
		<!-- Run Xsd.exe -->
		<Exec Command="&quot;$(XsdExe)&quot; &quot;$(XsdInput)&quot; /$(XsdTarget) /n:$(XsdNamespace) /out:&quot;$(XsdOutputFolder)&quot;" />
	
	</Target>

</Project>

